/**
 * ATTENTION. This code was AUTO GENERATED by ts2typebox. While I don't know
 * your use case, there is a high chance that direct changes to this file get
 * lost. Consider making changes to the underlying Typescript code you use to
 * generate this file instead. The default file is called "types.ts", perhaps
 * have a look there! :]
 */

import { Type, Static, TSchema } from '@sinclair/typebox';

export type PageDto<T extends TSchema> = Static<ReturnType<typeof PageDto<T>>>;
export const PageDto = <T extends TSchema>(T: T) =>
  Type.Object({
    items: Type.Array(T),
  });

export type Identifiable = Static<typeof Identifiable>;
export const Identifiable = Type.Object({
  id: Type.String(),
});

export type ParamIdFilterDto = Static<typeof ParamIdFilterDto>;
export const ParamIdFilterDto = Type.Object({
  id: Type.String(),
});

export type ListFilterDto = Static<typeof ListFilterDto>;
export const ListFilterDto = Type.Object({
  from: Type.Optional(
    Type.String({ description: 'starts list after this element' })
  ),
  pageSize: Type.Optional(
    Type.Number({ description: 'starts list after this element' })
  ),
});

export type QueryFilterDto = Static<typeof QueryFilterDto>;
export const QueryFilterDto = Type.Composite([
  ListFilterDto,
  Type.Object({
    query: Type.Optional(Type.String({ description: 'query string' })),
  }),
]);

export type DictionaryListFilterDto = Static<typeof DictionaryListFilterDto>;
export const DictionaryListFilterDto = Type.Composite([
  ListFilterDto,
  Type.Object({
    type: Type.Optional(Type.String()),
  }),
]);

export type DictionaryChunkParamFilterDto = Static<
  typeof DictionaryChunkParamFilterDto
>;
export const DictionaryChunkParamFilterDto = Type.Composite([
  ParamIdFilterDto,
  Type.Object({
    hieroes: Type.String(),
  }),
]);

export type DictionaryInfoDto = Static<typeof DictionaryInfoDto>;
export const DictionaryInfoDto = Type.Composite([
  Identifiable,
  Type.Object({
    description: Type.Optional(Type.String()),
    language: Type.String(),
    link: Type.Optional(Type.String()),
    size: Type.Optional(Type.Number()),
  }),
]);

export type DictionaryItemDto = Static<typeof DictionaryItemDto>;
export const DictionaryItemDto = Type.Composite([
  Identifiable,
  Type.Object({
    i: Type.Record(Type.String(), Type.String()),
  }),
]);

export type SignNewDto = Static<typeof SignNewDto>;
export const SignNewDto = Type.Object({
  name: Type.String(),
  image: Type.Optional(Type.String()),
  classification: Type.String(),
  description: Type.Optional(Type.String()),
  fontSize: Type.Optional(Type.Number()),
  dir: Type.Optional(Type.String()),
});

export type SignDto = Static<typeof SignDto>;
export const SignDto = Type.Intersect([SignNewDto, Identifiable]);
